diff -Naur soc/atc260x/allo-hifi-dac.c soc_july12/atc260x/allo-hifi-dac.c
--- soc/atc260x/allo-hifi-dac.c	1970-01-01 05:30:00.000000000 +0530
+++ soc_july12/atc260x/allo-hifi-dac.c	2017-06-28 10:11:44.629835123 +0530
@@ -0,0 +1,183 @@
+/*
+ * ALSA ASoC Machine Driver for Allo Piano DAC
+ *
+ * Author:      Baswaraj K <jaikumar@cem-solutions.net>
+ *	       Copyright 2016
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/clk.h>
+#include <linux/platform_device.h>
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <linux/gpio.h>
+#include <mach/gpio.h>
+#include <sound/soc.h>
+#include <mach/hardware.h>
+#include <linux/time.h>
+#include <linux/delay.h>
+#include "sndrv-owl.h"
+#include "../codecs/pcm512x.h"
+
+#define GPIO_NAME_PCM512X_DAC_MUTE	"dac_mute"
+#define PCM512X_DAC_MUTE	OWL_GPIO_PORTB(18)
+
+#define GPIO_NAME_PCM512X_HEAD_SHUT	"dac_shut"
+#define PCM512X_HEAD_SHUT	OWL_GPIO_PORTB(13)
+
+#define GPIO_NAME_PCM512X_AMP_SHUT	"amp_shut"
+#define PCM512X_AMP_SHUT	OWL_GPIO_PORTB(31)
+
+#define GPIO_NAME_PCM512X_AMP_MUTE	"amp_mute"
+#define PCM512X_AMP_MUTE	OWL_GPIO_PORTB(17)
+
+static bool digital_gain_0db_limit = true;
+module_param(digital_gain_0db_limit, bool, 0);
+MODULE_PARM_DESC(digital_gain_0db_limit, "Set the max volume");
+
+static bool glb_mclk = 1;
+module_param(glb_mclk, bool, 0);
+MODULE_PARM_DESC(glb_mclk, "Used to disable the MCLK clock");
+
+static int snd_allo_hifi_dac_hw_params(struct snd_pcm_substream *substream,
+	struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+
+        unsigned int sample_bits =
+                snd_pcm_format_physical_width(params_format(params));
+
+	return 0;
+}
+
+static struct snd_soc_ops allo_hifidac_ops = {
+	.hw_params = snd_allo_hifi_dac_hw_params,
+};
+
+/*
+ * Logic for a link as connected on a atm7059 board.
+ */
+static int snd_allo_hifi_dac_init(struct snd_soc_pcm_runtime *rtd)
+{
+	int ret = 0;
+
+	if (digital_gain_0db_limit) {
+		struct snd_soc_codec *codec = rtd->codec;
+
+		ret = snd_soc_limit_volume(codec, "Digital Playback Volume",
+				207);
+		if (ret < 0)
+			dev_warn(codec->dev,
+				"Failed to set volume limit: %d\n", ret);
+	}
+
+	return 0;
+}
+
+static struct snd_soc_dai_link allo_hifi_dac_link_dai = {
+	.name = "HifiDAC",
+	.stream_name = "HifiDAC",
+	.cpu_dai_name = "owl-audio-i2s",
+	.codec_dai_name = "pcm5102a-hifi",
+//	.init = snd_allo_hifi_dac_init,
+	.platform_name = "atm7059-pcm-audio",
+	.codec_name = "pcm5102a-codec",
+	.dai_fmt        = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+                                SND_SOC_DAIFMT_CBS_CFS,
+	.ops = &allo_hifidac_ops,
+};
+static struct snd_soc_card snd_soc_allo_hifidac = {
+	.name = "HifiDAC",
+	.owner = THIS_MODULE,
+	.dai_link = &allo_hifi_dac_link_dai,
+	.num_links = 1,
+};
+
+static struct platform_device *snd_allo_hifi_link_device_pcm5102a;
+
+static int __init snd_allo_hifi_link_init(void)
+{
+	int ret = 0;
+
+	snd_allo_hifi_link_device_pcm5102a =
+				platform_device_alloc("soc-audio", 1);
+	if (!snd_allo_hifi_link_device_pcm5102a) {
+		snd_err("ASoC: Platform device allocation failed\n");
+		return -ENOMEM;
+	}
+
+	platform_set_drvdata(snd_allo_hifi_link_device_pcm5102a,
+			&snd_soc_allo_hifidac);
+	ret = platform_device_add(snd_allo_hifi_link_device_pcm5102a);
+	if (ret) {
+		snd_err("ASoC: Platform device allocation failed\n");
+		goto platform_device_add_failed;
+	}
+
+
+	/** Configure Mute and Shutdown for DAC and Amplifier board **/
+	act_setl(act_readl(MFP_CTL1) | (0x1 << 22), MFP_CTL1); /* GPIOB pins */
+
+	/** Configure Mute pin **/
+	ret = gpio_request(PCM512X_DAC_MUTE, GPIO_NAME_PCM512X_DAC_MUTE);
+	if (ret < 0) {
+		pr_err("DAC mute control %d request failed!\n",
+				PCM512X_DAC_MUTE);
+		goto platform_device_add_failed;
+	}
+	gpio_direction_output(PCM512X_DAC_MUTE, 1);
+
+	/** configure Headphone Shutdown pin *****/
+	if (gpio_request(PCM512X_HEAD_SHUT, GPIO_NAME_PCM512X_HEAD_SHUT) < 0) {
+		pr_err("Headphone shutdown control %d request failed!\n",
+				PCM512X_HEAD_SHUT);
+	}
+	gpio_direction_output(PCM512X_HEAD_SHUT, 1);
+
+	/** configure Amp Shutdown pin **/
+	if (gpio_request(PCM512X_AMP_SHUT, GPIO_NAME_PCM512X_AMP_SHUT) < 0) {
+		pr_err("AMP shutdown control %d request failed!\n",
+				PCM512X_AMP_SHUT);
+	}
+	gpio_direction_output(PCM512X_AMP_SHUT, 1);
+
+	/** configure Amp Mute pin **/
+	if (gpio_request(PCM512X_AMP_MUTE, GPIO_NAME_PCM512X_AMP_MUTE) < 0) {
+		pr_err("AMP Mute control %d request failed!\n",
+				PCM512X_AMP_MUTE);
+	}
+	gpio_direction_output(PCM512X_AMP_MUTE, 0);
+
+	return 0;
+
+platform_device_add_failed:
+	platform_device_put(snd_allo_hifi_link_device_pcm5102a);
+
+	return ret;
+}
+
+static void __exit snd_allo_hifi_link_exit(void)
+{
+	platform_device_unregister(snd_allo_hifi_link_device_pcm5102a);
+}
+
+module_init(snd_allo_hifi_link_init);
+module_exit(snd_allo_hifi_link_exit);
+
+/* Module information */
+MODULE_AUTHOR("Baswaraj K <jaikumar@cem-solutions.net>");
+MODULE_DESCRIPTION("ALSA ASoC Machine Driver for Allo Hifi DAC");
+MODULE_LICENSE("GPL");
diff -Naur soc/atc260x/Kconfig soc_july12/atc260x/Kconfig
--- soc/atc260x/Kconfig	2016-11-29 12:06:54.551149209 +0530
+++ soc_july12/atc260x/Kconfig	2017-06-22 15:17:15.668350652 +0530
@@ -27,8 +27,16 @@
 	select SND_SOC_ATC2603C
 	help
 	  Say Y if you want to add support for SoC audio on atc2603a-based
-	  ATM7059 board.	  
-
+	  ATM7059 board.	
+ 
+config SND_SOC_ALLO_HIFI_DAC
+        tristate "SoC Audio support for allo PCM5102DAC"
+        select SND_SOC_OWL
+        select SND_SOC_HDMI_OWL
+        select SND_SOC_DAI_OWL
+        help
+          Say Y if you want to add support for SoC audio on PCM5102
+	  board.
 config SND_SOC_ALLO_PIANO_DAC
 	tristate "SoC Audio support for allo PianoDAC"
 	select SND_SOC_OWL
diff -Naur soc/atc260x/Makefile soc_july12/atc260x/Makefile
--- soc/atc260x/Makefile	2016-12-12 11:46:36.299908929 +0530
+++ soc_july12/atc260x/Makefile	2017-06-22 15:00:44.740347711 +0530
@@ -7,6 +7,7 @@
 snd-soc-pcm-owl-objs			:=	pcm-owl.o dmaengine-pcm-owl.o
 snd-soc-link-owl-objs			:=	link-owl.o
 snd-soc-allo-piano-dac-objs		:=	allo-piano-dac.o
+snd-soc-allo-hifi-dac-objs              :=      allo-hifi-dac.o
 snd-soc-allo-piano-dac-plus-objs	:=	allo-piano-dac-plus.o
 
 obj-$(CONFIG_SND_SOC_OWL) += snd-soc-pcm-owl.o
@@ -19,4 +20,5 @@
 # ATC2603A PMU Machine Support
 obj-$(CONFIG_SND_SOC_ALL_PMU_OWL) += snd-soc-link-owl.o
 obj-$(CONFIG_SND_SOC_ALLO_PIANO_DAC) += snd-soc-allo-piano-dac.o
+obj-$(CONFIG_SND_SOC_ALLO_HIFI_DAC) += snd-soc-allo-hifi-dac.o
 obj-$(CONFIG_SND_SOC_ALLO_PIANO_DAC_PLUS) += snd-soc-allo-piano-dac-plus.o
diff -Naur soc/codecs/Kconfig soc_july12/codecs/Kconfig
--- soc/codecs/Kconfig	2016-11-29 12:06:54.555149211 +0530
+++ soc_july12/codecs/Kconfig	2017-06-23 10:18:02.028556646 +0530
@@ -14,6 +14,7 @@
 	select SND_SOC_L3
 	select SND_SOC_AB8500_CODEC if ABX500_CORE
 	select SND_SOC_AC97_CODEC if SND_SOC_AC97_BUS
+#	select SND_SOC_PCM5102A 
 	select SND_SOC_AD1836 if SPI_MASTER
 	select SND_SOC_AD193X if SND_SOC_I2C_AND_SPI
 	select SND_SOC_AD1980 if SND_SOC_AC97_BUS
@@ -82,6 +83,7 @@
 	select SND_SOC_WM2000 if I2C
 	select SND_SOC_WM2200 if I2C
 	select SND_SOC_WM5100 if I2C
+        }
 	select SND_SOC_WM5102 if MFD_WM5102
 	select SND_SOC_WM5110 if MFD_WM5110
 	select SND_SOC_WM8350 if MFD_WM8350
@@ -304,6 +306,13 @@
         help
           Say Y or M if you want to add support for PCM512x-i2c audiocodec.
 
+config SND_SOC_PCM5102A 
+        tristate "Texas Instruments PCM5102A CODECs"
+        #default n
+        #select SND_SOC_PCM5102A
+        help
+          Say Y or M if you want to add support for PCM512x-i2c audiocodec.  
+	
 config SND_SOC_RT5631
 	tristate
 
diff -Naur soc/codecs/Makefile soc_july12/codecs/Makefile
--- soc/codecs/Makefile	2016-11-29 12:06:54.555149211 +0530
+++ soc_july12/codecs/Makefile	2017-06-22 14:53:53.912346493 +0530
@@ -45,6 +45,7 @@
 snd-soc-pcm3008-objs := pcm3008.o
 snd-soc-pcm512x-objs := pcm512x.o
 snd-soc-pcm512x-i2c-objs := pcm512x-i2c.o
+snd-soc-pcm5102a-objs := pcm5102a.o
 snd-soc-rt5631-objs := rt5631.o
 snd-soc-sgtl5000-objs := sgtl5000.o
 snd-soc-alc5623-objs := alc5623.o
@@ -173,6 +174,7 @@
 obj-$(CONFIG_SND_SOC_OMAP_HDMI_CODEC) += snd-soc-omap-hdmi-codec.o
 obj-$(CONFIG_SND_SOC_PCM3008)	+= snd-soc-pcm3008.o
 obj-$(CONFIG_SND_SOC_PCM512x)	+= snd-soc-pcm512x.o
+obj-$(CONFIG_SND_SOC_PCM5102A)  += snd-soc-pcm5102a.o
 obj-$(CONFIG_SND_SOC_PCM512x_I2C)	+= snd-soc-pcm512x-i2c.o
 obj-$(CONFIG_SND_SOC_RT5631)	+= snd-soc-rt5631.o
 obj-$(CONFIG_SND_SOC_SGTL5000)  += snd-soc-sgtl5000.o
diff -Naur soc/codecs/pcm5102a.c soc_july12/codecs/pcm5102a.c
--- soc/codecs/pcm5102a.c	1970-01-01 05:30:00.000000000 +0530
+++ soc_july12/codecs/pcm5102a.c	2017-06-23 10:29:46.156549677 +0530
@@ -0,0 +1,94 @@
+/*
+ * Driver for the PCM5102A codec
+ *
+ * Author:  Florian Meier <florian.meier@koalo.de>
+ *      Copyright 2013
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+
+#include <sound/soc.h>
+
+static struct snd_soc_dai_driver pcm5102a_dai = {
+    .name = "pcm5102a-hifi",
+    .playback = {
+        .channels_min = 2,
+        .channels_max = 2,
+        .rates = SNDRV_PCM_RATE_8000_192000,
+        .formats = SNDRV_PCM_FMTBIT_S16_LE |
+               SNDRV_PCM_FMTBIT_S24_LE |
+               SNDRV_PCM_FMTBIT_S32_LE
+    },
+};
+
+static struct snd_soc_codec_driver soc_codec_dev_pcm5102a;
+
+static int pcm5102a_probe(struct platform_device *pdev)
+{
+    printk("%s\n", __func__);
+	printk("TEST1 \n");
+    return snd_soc_register_codec(&pdev->dev, &soc_codec_dev_pcm5102a,
+            &pcm5102a_dai, 1);
+}
+
+static int pcm5102a_remove(struct platform_device *pdev)
+{
+    snd_soc_unregister_codec(&pdev->dev);
+    return 0;
+}
+
+static const struct of_device_id pcm5102a_of_match[] = {
+    { .compatible = "sunxi,pcm5102a", },
+    { }
+};
+MODULE_DEVICE_TABLE(of, pcm5102a_of_match);
+
+static struct platform_driver pcm5102a_codec_driver = {
+    .probe      = pcm5102a_probe,
+    .remove     = pcm5102a_remove,
+    .driver     = {
+        .name   = "pcm5102a-codec",
+        .of_match_table = pcm5102a_of_match,
+    },
+};
+
+static struct platform_device pcm5102a_codec_device = {
+	.name 	= "pcm5102a-codec",
+	.id 	= PLATFORM_DEVID_NONE,
+};
+
+static int __init pcm5102a_init(void)
+{
+	int err = 0;
+
+		if((err = platform_device_register(&pcm5102a_codec_device)) < 0)
+			return err;
+
+		if ((err = platform_driver_register(&pcm5102a_codec_driver)) < 0)
+			return err;
+
+	return 0;
+}
+module_init(pcm5102a_init);
+
+static void __exit pcm5102a_exit(void)
+{
+	platform_driver_unregister(&pcm5102a_codec_driver);
+	platform_device_unregister(&pcm5102a_codec_device);
+}
+module_exit(pcm5102a_exit);
+
+MODULE_DESCRIPTION("ASoC PCM5102A codec driver");
+MODULE_AUTHOR("Florian Meier <florian.meier@koalo.de>");
+MODULE_LICENSE("GPL v2");

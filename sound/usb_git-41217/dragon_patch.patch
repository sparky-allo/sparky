diff -Naur usb_git/clock.c usb_dsd_drg/clock.c
--- usb_git/clock.c	2016-11-29 12:06:54.635149211 +0530
+++ usb_dsd_drg/clock.c	2017-12-04 11:35:45.996096392 +0530
@@ -300,6 +300,11 @@
 			   dev->devnum, iface, fmt->altsetting, rate, ep);
 		return err;
 	}
+	
+	 /* Don't check the sample rate for devices which we know don't
+ *          * support reading */
+        if (snd_usb_get_sample_rate_quirk(chip))     //added for Dragonfly
+                return 0;
 
 	if ((err = snd_usb_ctl_msg(dev, usb_rcvctrlpipe(dev, 0), UAC_GET_CUR,
 				   USB_TYPE_CLASS | USB_RECIP_ENDPOINT | USB_DIR_IN,
diff -Naur usb_git/mixer.c usb_dsd_drg/mixer.c
--- usb_git/mixer.c	2016-11-29 12:06:54.635149211 +0530
+++ usb_dsd_drg/mixer.c	2017-11-13 12:51:32.604717806 +0530
@@ -1292,7 +1292,7 @@
 				SNDRV_CTL_ELEM_ACCESS_TLV_CALLBACK;
 		}
 	}
-
+	snd_usb_mixer_fu_apply_quirk(state->mixer, cval, unitid, kctl);  //DRAGONFLY
 	range = (cval->max - cval->min) / cval->res;
 	/* Are there devices with volume range more than 255? I use a bit more
 	 * to be sure. 384 is a resolution magic number found on Logitech
diff -Naur usb_git/mixer_maps.c usb_dsd_drg/mixer_maps.c
--- usb_git/mixer_maps.c	2016-11-29 12:06:54.635149211 +0530
+++ usb_dsd_drg/mixer_maps.c	2017-11-17 11:37:05.241732433 +0530
@@ -280,6 +280,23 @@
 	/* 15: MU */
 	{} /* terminator */
 };
+//added for dragonfly
+/* Bose companion 5, the dB conversion factor is 16 instead of 256 */ 
+static struct usbmix_dB_map bose_companion5_dB = {-5006, -6}; 
+	static struct usbmix_name_map bose_companion5_map[] = { 
+		{ 3, NULL, .dB = &bose_companion5_dB }, 
+		{ 0 }	/* terminator */ 
+	}; 
+	 
+	/* Dragonfly DAC 1.2, the dB conversion factor is 1 instead of 256 */ 
+	//static struct usbmix_dB_map dragonfly_1_2_dB = {0, 5000}; 
+	//static struct usbmix_name_map dragonfly_1_2_map[] = { 
+	//	{ 7, NULL, .dB = &dragonfly_1_2_dB }, 
+		//{ 0 }	/* terminator */ 
+//	};
+
+
+
 
 static struct usbmix_name_map scratch_live_map[] = {
 	/* 1: IT Line 1 (USB streaming) */
@@ -418,6 +435,18 @@
 		.id = USB_ID(0x27ac, 0x1000),
 		.map = kef_x300a_map,
 	},
+	//added for dragon fly
+        { 
+		/* Bose Companion 5 */ 
+		.id = USB_ID(0x05a7, 0x1020), 
+		.map = bose_companion5_map, 
+	}, 
+//	{ 
+//		/* Dragonfly DAC 1.2 */ 
+//		.id = USB_ID(0x21b4, 0x0081), 
+//		.map = dragonfly_1_2_map, 
+//
+//	},
 	{ 0 } /* terminator */
 };
 
diff -Naur usb_git/mixer_quirks.c usb_dsd_drg/mixer_quirks.c
--- usb_git/mixer_quirks.c	2016-11-29 12:06:54.635149211 +0530
+++ usb_dsd_drg/mixer_quirks.c	2017-11-16 14:52:28.909509169 +0530
@@ -39,7 +39,7 @@
 #include "mixer.h"
 #include "mixer_quirks.h"
 #include "helper.h"
-
+#include <sound/tlv.h>
 extern struct snd_kcontrol_new *snd_usb_feature_unit_ctl;
 
 struct std_mono_table {
@@ -1402,3 +1402,57 @@
 	}
 }
 
+
+static void snd_dragonfly_quirk_db_scale(struct usb_mixer_interface *mixer, 
+						struct usb_mixer_elem_info *cval,//added for dragonfly 
+						struct snd_kcontrol *kctl) 
+	{ 
+		/* Approximation using 10 ranges based on output measurement on hw v1.2. 
+		 * This seems close to the cubic mapping e.g. alsamixer uses. */ 
+		static const DECLARE_TLV_DB_RANGE(scale, 
+			 0,  1, TLV_DB_MINMAX_ITEM(-5300, -4970), 
+			 2,  5, TLV_DB_MINMAX_ITEM(-4710, -4160), 
+			 6,  7, TLV_DB_MINMAX_ITEM(-3884, -3710), 
+			 8, 14, TLV_DB_MINMAX_ITEM(-3443, -2560), 
+			15, 16, TLV_DB_MINMAX_ITEM(-2475, -2324), 
+			17, 19, TLV_DB_MINMAX_ITEM(-2228, -2031), 
+			20, 26, TLV_DB_MINMAX_ITEM(-1910, -1393), 
+			27, 31, TLV_DB_MINMAX_ITEM(-1322, -1032), 
+			32, 40, TLV_DB_MINMAX_ITEM(-968, -490), 
+			41, 50, TLV_DB_MINMAX_ITEM(-441, 0), 
+		); 
+	 
+		//usb_audio_info(mixer->chip, "applying DragonFly dB scale quirk\n"); 
+		//kctl->tlv.p = scale; 
+		//kctl->vd[0].access |= SNDRV_CTL_ELEM_ACCESS_TLV_READ; 
+		//kctl->vd[0].access &= ~SNDRV_CTL_ELEM_ACCESS_TLV_CALLBACK; 
+		if (cval->min == 0 && cval->max == 50) 
+		{ 
+			usb_audio_info(mixer->chip, "applying DragonFly dB scale quirk (0-50 variant)\n"); 
+			kctl->tlv.p = scale; 
+			kctl->vd[0].access |= SNDRV_CTL_ELEM_ACCESS_TLV_READ; 
+			kctl->vd[0].access &= ~SNDRV_CTL_ELEM_ACCESS_TLV_CALLBACK; 
+	 
+		} else if (cval->min == 0 && cval->max <= 1000) 
+		{ 
+			/* Some other clearly broken DragonFly variant. 
+			 * At least a 0..53 variant (hw v1.0) exists. 
+			 */ 
+			usb_audio_info(mixer->chip, "ignoring too narrow dB range on a DragonFly device"); 
+			kctl->vd[0].access &= ~SNDRV_CTL_ELEM_ACCESS_TLV_CALLBACK; 
+		}
+	} 
+	 
+	void snd_usb_mixer_fu_apply_quirk(struct usb_mixer_interface *mixer, 
+					  struct usb_mixer_elem_info *cval, int unitid, 
+					  struct snd_kcontrol *kctl) 
+	{ 
+		switch (mixer->chip->usb_id) { 
+		case USB_ID(0x21b4, 0x0081): /* AudioQuest DragonFly */ 
+	//		if (unitid == 7 && cval->min == 0 && cval->max == 50) 
+	//			snd_dragonfly_quirk_db_scale(mixer, kctl); 
+			if (unitid == 7 && cval->control == UAC_FU_VOLUME) 
+				snd_dragonfly_quirk_db_scale(mixer, cval, kctl);
+			break; 
+		} 
+	}
diff -Naur usb_git/mixer_quirks.h usb_dsd_drg/mixer_quirks.h
--- usb_git/mixer_quirks.h	2016-11-29 12:06:54.635149211 +0530
+++ usb_dsd_drg/mixer_quirks.h	2017-11-13 16:38:52.008760546 +0530
@@ -9,5 +9,11 @@
 void snd_usb_mixer_rc_memory_change(struct usb_mixer_interface *mixer,
 				    int unitid);
 
+void snd_usb_mixer_fu_apply_quirk(struct usb_mixer_interface *mixer, 
+	    			  struct usb_mixer_elem_info *cval, int unitid, 
+	    			  struct snd_kcontrol *kctl); 
+	
+
+
 #endif /* SND_USB_MIXER_QUIRKS_H */
 
diff -Naur usb_git/quirks.c usb_dsd_drg/quirks.c
--- usb_git/quirks.c	2017-12-04 11:01:09.260090206 +0530
+++ usb_dsd_drg/quirks.c	2017-12-04 11:39:54.848097006 +0530
@@ -893,6 +893,38 @@
 		ep->skip_packets = 16;
 }
 
+//added for dragonfly
+
+bool snd_usb_get_sample_rate_quirk(struct snd_usb_audio *chip)
+{
+        /* devices which do not support reading the sample rate. */
+        switch (chip->usb_id) {
+        case USB_ID(0x041E, 0x4080): /* Creative Live Cam VF0610 */
+        case USB_ID(0x045E, 0x075D): /* MS Lifecam Cinema  */
+        case USB_ID(0x045E, 0x076D): /* MS Lifecam HD-5000 */
+        case USB_ID(0x045E, 0x076E): /* MS Lifecam HD-5001 */
+        case USB_ID(0x045E, 0x076F): /* MS Lifecam HD-6000 */
+        case USB_ID(0x045E, 0x0772): /* MS Lifecam Studio */
+        case USB_ID(0x045E, 0x0779): /* MS Lifecam HD-3000 */
+        case USB_ID(0x047F, 0x02F7): /* Plantronics BT-600 */
+        case USB_ID(0x047F, 0x0415): /* Plantronics BT-300 */
+        case USB_ID(0x047F, 0xAA05): /* Plantronics DA45 */
+        case USB_ID(0x04D8, 0xFEEA): /* Benchmark DAC1 Pre */
+        case USB_ID(0x0556, 0x0014): /* Phoenix Audio TMX320VC */
+        case USB_ID(0x05A3, 0x9420): /* ELP HD USB Camera */
+        case USB_ID(0x074D, 0x3553): /* Outlaw RR2150 (Micronas UAC3553B) */
+        case USB_ID(0x1901, 0x0191): /* GE B850V3 CP2114 audio interface */
+        case USB_ID(0x1de7, 0x0013): /* Phoenix Audio MT202exe */
+        case USB_ID(0x1de7, 0x0014): /* Phoenix Audio TMX320 */
+        case USB_ID(0x1de7, 0x0114): /* Phoenix Audio MT202pcs */
+        case USB_ID(0x21B4, 0x0081): /* AudioQuest DragonFly */
+                return true;
+        }
+        return false;
+}
+
+
+
 void snd_usb_set_interface_quirk(struct usb_device *dev)
 {
 	/*
diff -Naur usb_git/quirks.h usb_dsd_drg/quirks.h
--- usb_git/quirks.h	2016-11-29 12:06:54.639149211 +0530
+++ usb_dsd_drg/quirks.h	2017-11-17 11:35:17.561727315 +0530
@@ -21,6 +21,9 @@
 void snd_usb_set_format_quirk(struct snd_usb_substream *subs,
 			      struct audioformat *fmt);
 
+//added for dragonfly
+bool snd_usb_get_sample_rate_quirk(struct snd_usb_audio *chip);
+
 int snd_usb_is_big_endian_format(struct snd_usb_audio *chip,
 				 struct audioformat *fp);
 
diff -Naur usb_git/usbaudio.h usb_dsd_drg/usbaudio.h
--- usb_git/usbaudio.h	2016-11-29 12:06:54.639149211 +0530
+++ usb_dsd_drg/usbaudio.h	2017-11-17 12:01:07.205736149 +0530
@@ -60,6 +60,15 @@
 
 	struct usb_host_interface *ctrl_intf;	/* the audio control interface */
 };
+/*patch for dragon fly */
+#define usb_audio_err(chip, fmt, args...) \
+	dev_err(&(chip)->dev->dev, fmt, ##args)
+#define usb_audio_warn(chip, fmt, args...) \
+	dev_warn(&(chip)->dev->dev, fmt, ##args)
+#define usb_audio_info(chip, fmt, args...) \
+	dev_info(&(chip)->dev->dev, fmt, ##args)
+#define usb_audio_dbg(chip, fmt, args...) \
+	dev_dbg(&(chip)->dev->dev, fmt, ##args)
 
 /*
  * Information about devices with broken descriptors
